#!/bin/bash

# 添加新文件下载任务到redis,标识TTL
add_into_cache(){
    hash="$1";
    HASH_LIFE_SPAN=${ttl_12_hours}
    ${redis_cmd} set "${hash}" "${hash}" EX ${HASH_LIFE_SPAN} &>/dev/null;
}

# 刷新缓存
refresh_cache(){
    amule-util -h | while read hash; do
    add_into_cache "${hash}";
    done
}

# 清除过期任务
clear_expired_task(){
    amule-util -h | while read hash; do
        result=$(${redis_cmd} exists "${hash}" 2>/dev/null);
        if [ ${result} -eq 0 ]; then
            amlog "expired download task: ${hash}:${result}";
            amule-task -c "${hash}";
        fi
    done
}

# 从搜索结果中过滤掉非pdf和已经下载过的文件
# TODO 过滤掉正在下载列表中的
filter_results(){
    rm "${ids_file}";
    touch "${ids_file}";
    amulecmd --command="results" | grep '.pdf$'| grep '^[0-9]\{1,5\}\,[0-9A-F]\{32\}' -o | while read line; do
        tid=$(echo $line | grep '^[0-9]\{1,10\}' -o);
        file_hash=$(echo $line | grep '[0-9A-F]\{32\}' -o);

		amule-book -n ${file_hash} &>/dev/null;
		if [ $? -eq 0 ]; then
        add_into_cache "${file_hash}";
        echo "$tid" >> ${ids_file};
			  amlog "########## 发现的新下载: ${file_hash}";
		fi
    done
}

# 取关键字执行搜索任务,将新发现的搜索任务加入到下载列表中,由redis维护下载任务的寿命.
function auto(){
    # 到redis关键字列表中去搜索关键字
    keyword=$(amule-key -k);
    amlog "新关键字: ${keyword}"

    status=1;
    time_counter=0;
    
    # 针对下载关键字执行搜索任务
    amulecmd --command="search kad ${keyword}" &>/dev/null;

    amlog "正在搜索请等待...";
    ts_start=$(date "+%Y%m%d%H%M%S");

    # 轮询检查搜索任务状态,如果超时(5s*30)仍无结果,中止当前搜索
    while [ ${status} -ne 0 ]; do
        amulecmd --command="progress" | grep 'not available' &>/dev/null;
        status=$?;

        if [ ${time_counter} -gt 30 ]; then
            amlog "搜索超时,重新开始:${keyword}";
            return;
        fi

        sleep 5;
        let time_counter=time_counter+1;
    done

    # 搜索成功哦你结束,查看结果总数
    item_count=$(amule-util -r);
    amlog "搜索到的结果: ${item_count}";

    # 结果为0,为命中搜索结果,终止当前操作
    ts_end=$(date "+%Y%m%d%H%M%S");
    if [ ${item_count} -eq 0 ]; then
        return;
    fi

    # 过滤搜索结果,筛选掉已经下载过的文件,保留新鲜文件,记录任务号到临时文件(ids_file)
    filter_results;

    # 
    fcount=$(cat "${ids_file}" | wc -l) 
    amlog "过滤后的结果: $fcount";
    task_count_before=$(amule-util -c);

    # 添加新鲜文件到下载任务列表
    addtask ${item_count} &>/dev/null;

    task_count_after=$(amule-util -c);
    ts_done=$(date "+%Y%m%d%H%M%S");
    amlog "新增下载内容: ${task_count_before},${task_count_after}";

    # 记录搜索历史
    # TODO 日志维度. 关键字，开始时间，结束时间，搜索结果数，过滤结果数，完成时间
    echo "search-log: ${keyword},${ts_start},${ts_end},${item_count},${fcount},${ts_done}";
}

# 如果下载任务未饱和,执行搜索任务
search(){
    if [ -e ".search.lock" ]; then
        amlog "搜索任务运行中...";
        return;
    fi
    
    total_task=$(amule-util -c);
    if [ ${total_task} -gt ${AMB_TASK_CAPACITY} ]; then
        amlog "下载任务总数已饱和: ${total_task}/${AMB_TASK_CAPACITY}";
        return;
    fi

    task_count=$(amule-util -R);
    if [ ${task_count} -gt ${AMB_TASK_CONCURRENCY} ]; then
        amlog "下载任务并发数已饱和: ${task_count}/${AMB_TASK_CONCURRENCY}";
        return;
    fi

    touch .search.lock
    for i in {1..3}; do
        auto;
    done

    rm .search.lock
}

basepath=$(cd `dirname $0`;pwd);
cd ${basepath}
source .ambotrc

while getopts "scC" opt; do
    case ${opt} in
        c) { refresh_cache; exit;};;
        C) { clear_expired_task; exit;};;
        s) { search; exit; };;
    esac
done

