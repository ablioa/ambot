#!/bin/bash

###############################################################################
# 命令选项
# -s 同步远程下载文件 
# -d 删除废弃的文件
# -r 从仓库中提取文件
# -f 刷新路径缓存
#
# 服务安装
# * * * * * /soft/amarc/amarc -s 1>>/soft/amarc/log/sync.txt &
# * * * * * /soft/amarc/amarc -d 1>>/soft/amarc/log/delete.txt &
# * * * * * /soft/amarc/amarc -r 1>>/soft/amarc/log/retrieve.txt &
###############################################################################

# 本地文件管理
remote_host=wangzh@warmcode.net
remote_repo_path=/data/res/in
local_repo_path=/media/hd0/repository/00
local_temp_path=temp

download_lock=.download.lock
retrieve_lock=.retrieve.lock

REDIS_PWD='abc123'
REDIS_CMD="/soft/redis/redis-master/bin/redis-cli -a ${REDIS_PWD}"

# set redis string value
redis_set(){
	dkey="$1";
	dval="$2";
	${REDIS_CMD} set "${dkey}" "${dval}" &>/dev/null;
}

# get redis string value
redis_get(){
	dkey="${1}";
	${REDIS_CMD} get "${dkey}" 2>/dev/null;
}

# delete redis string value
redis_delete(){
    dkey="${1}";
	${REDIS_CMD} del "${dkey}" &>/dev/null;
}

# download documents from remote server
sync(){
	if [ -e ${download_lock} ]; then
	    return;
	fi
	
	touch ${download_lock};

	files=$(ssh ${remote_host} "ls ${remote_repo_path}");
	for file in ${files[*]}
	do
		scp "${remote_host}:${remote_repo_path}/${file}" "${local_temp_path}/${file}"
		if [ $? -eq 0 ]; then
		    rmd5=$(ssh ${remote_host} "md5sum ${remote_repo_path}/${file}" | awk '{print $1}');
			lmd5=$(md5sum "temp/${file}" | awk '{print $1}');
			if [ "${lmd5}" == "${rmd5}" ]; then
			   mv ${local_temp_path}/${file} ${local_repo_path}
			   ssh ${remote_host} "rm ${remote_repo_path}/${file}";

			   dkey=$(echo ${file} | grep '[0-9a-z\-]\{36\}' -o);
			   dval="${local_repo_path}/${file}";

			   redis_set "${dkey}" "${dval}";
			   amlog "${dkey} : ${dval}";
			fi
		fi
	done

	rm ${download_lock}
}

# remove documents from local repository
delete_from_repository(){
	${DB_CON} "select book_code from book where opstatus='04'" 2>/dev/null | while read bcode
	do
	    bpath=$(redis_get ${bcode});
	    if [ ! -z ${bpath} ]; then
			mv -v "${bpath}" "trash/" &>/dev/null;
			if [ $? -eq 0 ]; then
		        amlog "book_to_remove: ${bcode} : ${bpath}";
				${DB_CON} "update book set opstatus='05' where book_code=\"${bcode}\"" &>/dev/null;
			    redis_delete "${bcode}";
			fi
		else
			echo "FILE NOT FOUND: ${bcode}";
		fi
	done;
}

# refresh redis cache
# 1. add local items into cache
# 2. remove invalid ones.
refresh_redis(){
	repository_path=/media/hd0/repository/00;
	ls ${repository_path} | while read file
	do
		fcode=${file:0:36}
	    fpath="${repository_path}/${file}";
		redis_set "${fcode}" "${fpath}";
		amlog "${fcode} : ${fpath}";
	done
}

# retrieve items from local repository
retrieve_from_repository(){
    if [ -e ${retrieve_lock} ]; then
	    echo "retrieve process is already running now!";
        return;
	fi

	touch ${retrieve_lock};

    ${DB_CON} "select book_code from bag where bag_status=0" 2>/dev/null | while read bcode
	do
	    bpath=$(redis_get ${bcode});
	    if [ -z ${bpath} ]; then
			amlog "file not found in local repository: ${bcode}";
		else
			bname=$(${DB_CON} "select concat(book_name,concat('_M',LPAD(pk_book,10,0))) from book where book_code=\"${bcode}\"");
		    amlog "${bpath} -> ${bname}.pdf";
		    cp -v ${bpath} "trunk/${bname}.pdf" &>/dev/null;
			${DB_CON} "update bag set bag_status=1 where book_code=\"${bcode}\"" 2>/dev/null;
		fi
	done

	rm ${retrieve_lock}
}

usage(){
    echo "Usage: $0 [options]";
	echo "  -s download documents from remote server.";
	echo "  -r retrieve documents from local repository";
	echo "  -d remove items from local reposirory";
	echo "  -f update redis cache";
	echo "  -t for test"
}

basepath=$(cd `dirname $0`;pwd);
cd ${basepath}

. .amarcres

while getopts "srdft" opt; do
    case ${opt} in
		s){ sync; exit; };;
        f){ refresh_redis; exit; };;
        t){ test_redis_delete; exit; };;
        d){ delete_from_repository; exit; };;
		r){ retrieve_from_repository; exit; };;
	esac
done

usage;
